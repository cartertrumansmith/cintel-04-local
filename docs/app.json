[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui, render\nfrom shinywidgets import render_plotly\nimport seaborn as sns\nfrom shiny import reactive\nimport palmerpenguins\n\nui.page_opts(title=\"Filling layout\", fillable=True)\n\npenguins_df = palmerpenguins.load_penguins()\n# Add a Shiny UI sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    # Use the ui.h2() function to add a 2nd level header to the sidebar\n    ui.h2(\"Sidebar\")\n    \n    # Use ui.input_selectize() to create a dropdown input to choose a column\n    ui.input_selectize(\"selected_island\",\"Selected Island\",[\"Torgersen\",\"Biscoe\",\"Dream\"])\n    \n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\",\"Plotly Bin Count\",1,min=1)\n    \n    # Use ui.input_slider() to create a slider input for the number of Seaborn bins\n    ui.input_slider(\"seaborn_bin_count\",\"Seaborn Bin Count\",value=1,min=1,max=100)\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(\"selected_species_list\",\"Selected Species List\",[\"Adelie\", \"Gentoo\", \"Chinstrap\"],selected=[\"Adelie\"],inline=True)\n\n    # Use ui.hr() to add a horizontal rule to the sidebar\n    ui.hr()\n\n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"Github\",href=\"https://github.com/cartertrumansmith/cintel-02-data\",target=\"_blank\")\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        def species_data():\n            return render.DataTable(filtered_data())\n\n        with ui.card(full_screen=True):\n            ui.card_header(\"Data Grid\")\n            @render.data_frame\n            def grid():\n               return render.DataGrid(data=filtered_data())\n\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Species\")\n\n        @render_plotly\n        def histogram_plotly():\n            return px.histogram(filtered_data(), x=\"bill_length_mm\",nbins=input.plotly_bin_count())\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Histogram: Species\")\n\n        @render.plot\n        def histogram_seaborn():\n            return sns.histplot(data=filtered_data(),x=\"bill_length_mm\",bins=input.seaborn_bin_count())\n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot: Species\")\n\n        @render_plotly\n        def plotly_scatterplot():\n            return px.scatter(data_frame=filtered_data(),x=\"bill_length_mm\", y=\"body_mass_g\",color=\"species\",hover_name=\"island\",symbol=\"sex\")\n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n@reactive.calc\ndef filtered_data():\n    selected_species = input.selected_species_list()\n    selected_island = [input.selected_island()]\n    selected_seaborn_bins = input.seaborn_bin_count()\n    selected_plotly_bins = input.plotly_bin_count()\n\n    isSpeciesMatch = penguins_df[\"species\"].isin(selected_species)\n    isIslandMatch = penguins_df[\"island\"].isin(selected_island)\n\n    filtered = penguins_df[isSpeciesMatch & isIslandMatch]\n    \n    return filtered\n", "type": "text"}]